name: Build AmneziaWG for OpenWRT

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    name: "OpenWRT ${{ matrix.build_env.tag }} - ${{ matrix.build_env.target }}/${{ matrix.build_env.subtarget }}"
    runs-on: ubuntu-latest
    timeout-minutes: 180  # Увеличиваем таймаут для сборки
    
    strategy:
      matrix:
        build_env:
          - tag: "22.03.2"
            pkgarch: "mipsel_24kc"
            target: "ramips"
            subtarget: "mt7621"
            vermagic: "c91e62db69d188afca1b6cc5c9e1b72d"

    steps:
      - name: Checkout OpenWRT
        uses: actions/checkout@v4
        with:
          repository: openwrt/openwrt
          ref: v${{ matrix.build_env.tag }}
          fetch-depth: 0

      - name: Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses-dev unzip git python3

      - name: Cache Dependencies
        uses: actions/cache@v4
        env:
          cache-name: "openwrt-${{ matrix.build_env.tag }}-${{ matrix.build_env.target }}"
        with:
          path: |
            ./dl
            ./staging_dir
            ./build_dir
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('feeds.conf.default') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-

      - name: Configure Build
        run: |
          echo "src-git awgopenwrt https://github.com/yury-sannikov/awg-openwrt.git" >> feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a

          # Базовый конфиг
          wget -qO .config https://downloads.openwrt.org/releases/${{ matrix.build_env.tag }}/targets/${{ matrix.build_env.target }}/${{ matrix.build_env.subtarget }}/config.buildinfo
          
          # AmneziaWG пакеты
          echo "CONFIG_PACKAGE_kmod-amneziawg=m" >> .config
          echo "CONFIG_PACKAGE_amneziawg-tools=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-amneziawg=y" >> .config
          
          # Зависимости
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-curve25519=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-blake2s=m" >> .config

          make defconfig

      - name: Build Toolchain (Safe Mode)
        run: |
          make -j2 tools/install
          make -j2 toolchain/install

      - name: Build Kernel
        run: |
          make -j2 target/linux/compile V=sc 2>&1 | tee kernel-build.log
          
          # Проверка vermagic
          VERMAGIC=$(cat ./build_dir/target-*/linux-*/linux-*/.vermagic)
          echo "Vermagic: $VERMAGIC"
          if [ "$VERMAGIC" != "${{ matrix.build_env.vermagic }}" ]; then
            echo "::error::Vermagic mismatch! Expected ${{ matrix.build_env.vermagic }}, got $VERMAGIC"
            exit 1
          fi

      - name: Build Packages
        run: |
          for pkg in kmod-amneziawg luci-app-amneziawg amneziawg-tools; do
            echo "Building $pkg..."
            make package/$pkg/{clean,compile} -j2 V=sc || {
              echo "::warning::Failed to build $pkg, retrying..."
              make package/$pkg/compile -j1 V=s
            }
          done

      - name: Collect Artifacts
        run: |
          mkdir -p artifacts
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/*.ipk artifacts/
          cp bin/targets/${{ matrix.build_env.target }}/${{ matrix.build_env.subtarget }}/packages/kmod-amneziawg_*.ipk artifacts/
          
          # Проверка наличия файлов
          if [ ! -f artifacts/kmod-amneziawg_*.ipk ]; then
            echo "::error::No kernel module package found!"
            exit 1
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          files: |
            artifacts/*.ipk
