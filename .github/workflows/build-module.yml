name: Create Release on Tag
on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    name: "v${{ matrix.build_env.tag }} - ${{ matrix.build_env.pkgarch }} :: ${{ matrix.build_env.target }}/ ${{ matrix.build_env.subtarget }} build"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_env:
          - tag: "22.03.2"
            pkgarch: mipsel_24kc
            target: ramips
            subtarget: mt7621
            vermagic: "c91e62db69d188afca1b6cc5c9e1b72d"

    steps:
      - uses: actions/checkout@v4
        with:
          repository: openwrt/openwrt
          ref: v${{ matrix.build_env.tag }}
          fetch-depth: 0

      - name: Cache Tools and Kernel
        uses: actions/cache@v4
        env:
          cache-name: "cache-tools-kernel-${{ matrix.build_env.tag }}-${{ matrix.build_env.pkgarch }}-${{ matrix.build_env.target }}-${{ matrix.build_env.subtarget }}"
        with:
          path: |
            ./staging_dir/toolchain-*
            ./staging_dir/target-*
            ./build_dir/host-*
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}

      - name: Build Kernel and Tools
        run: |
          echo "Building for pkgarch: ${{ matrix.build_env.pkgarch }}, target: ${{ matrix.build_env.target }}, subtarget: ${{ matrix.build_env.subtarget }}"

          wget https://downloads.openwrt.org/releases/${{ matrix.build_env.tag }}/targets/${{ matrix.build_env.target }}/${{ matrix.build_env.subtarget }}/feeds.buildinfo -O feeds.conf
          echo "src-git awgopenwrt https://github.com/yury-sannikov/awg-openwrt.git" >> feeds.conf
          ./scripts/feeds update -a
          ./scripts/feeds install -a

          wget https://downloads.openwrt.org/releases/${{ matrix.build_env.tag }}/targets/${{ matrix.build_env.target }}/${{ matrix.build_env.subtarget }}/config.buildinfo -O .config
          echo "CONFIG_PACKAGE_kmod-amneziawg=m" >> .config
          echo "CONFIG_PACKAGE_amneziawg-tools=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-amneziawg=y" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-lib-chacha20poly1305=m" >> .config
          echo "CONFIG_PACKAGE_kmod-crypto-chacha20poly1305=m" >> .config

          make defconfig
          make tools/install -j$(nproc)
          make toolchain/install -j$(nproc)
          make target/linux/compile -j$(nproc) V=s

          VERMAGIC="$(cat ./build_dir/target-*/linux-*/linux-*/.vermagic)"
          echo "Current vermagic: $VERMAGIC"
          if [ "$VERMAGIC" != "${{ matrix.build_env.vermagic }}" ]; then
            echo "Vermagic mismatch! Expected ${{ matrix.build_env.vermagic }}, but got $VERMAGIC"
            exit 1
          fi

      - name: Build AmneziaWG Packages
        run: |
          make package/kmod-amneziawg/{clean,download,prepare} V=s
          make package/kmod-amneziawg/compile V=s
          make package/luci-app-amneziawg/{clean,download,prepare} V=s
          make package/luci-app-amneziawg/compile V=s
          make package/amneziawg-tools/{clean,download,prepare} V=s
          make package/amneziawg-tools/compile V=s

      - name: Prepare artifacts
        run: |
          tag_name=${{ github.ref_name }}
          mkdir -p awgrelease
          postfix="${tag_name}_v${{ matrix.build_env.tag }}_${{ matrix.build_env.pkgarch }}_${{ matrix.build_env.target }}_${{ matrix.build_env.subtarget }}"
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/amneziawg-tools_*.ipk awgrelease/amneziawg-tools_${postfix}.ipk
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/luci-app-amneziawg_*.ipk awgrelease/luci-app-amneziawg_${postfix}.ipk
          cp bin/targets/${{ matrix.build_env.target }}/${{ matrix.build_env.subtarget }}/packages/kmod-amneziawg_*.ipk awgrelease/kmod-amneziawg_${postfix}.ipk

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: awgrelease/*.ipk
